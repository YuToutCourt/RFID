var searchIndex = new Map(JSON.parse('[\
["RFID",{"doc":"Carte bancaire simulation en Rust","t":"HHHHHHHH","n":["auth","hexa_to_decimal","hexa_to_tableau","keyload","main","read","read_sector","write"],"q":[[0,"RFID"],[8,"pcsc"],[9,"alloc::vec"],[10,"alloc::string"]],"d":["Authentifie un bloc spécifique de la carte.","Convertit un vecteur d’octets hexadécimaux en une …","Convertit une chaîne hexadécimale en un tableau d’…","Charge la clé de la carte.","Point d’entrée principal du programme.","Lit les données d’un bloc spécifique de la carte.","Lit les données d’un secteur spécifique de la carte.","Écrit des données dans un bloc spécifique de la carte."],"i":[0,0,0,0,0,0,0,0],"f":"{{bd}f}{{{h{d}}}j}{l{{n{d}}}}{{b{n{d}}}f}{{}f}{{bd}{{h{d}}}}{{bd}{{h{{h{d}}}}}}{{bd{n{d}}}f}","c":[],"p":[[5,"Card",8],[1,"u8"],[1,"unit"],[5,"Vec",9],[1,"i128"],[5,"String",10],[1,"array"]],"b":[]}],\
["bitflags",{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"Q","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["pcsc",{"doc":"Communicate with smart cards using the PC/SC API.","t":"TTTPPGGPTPPPPPPFPFFPPPPPPPPFPPPPPPPPPPPPPPPPPPPPGPTTPPGPPPPPPPTTPPPPPPPPPPPPPPPPSSSTPPPPPTPPPPPPPPPPPHTTTPPPPGPFPTFFPPPPPTTGPPPPGPPPFFPPPPPPTPTPPFTTTTTTPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ABSENT","ANY","ATRMATCH","AsyncProtocolTypes","AtrString","Attribute","AttributeClass","BadSeek","CHANGED","CacheItemNotFound","CacheItemStale","CacheItemTooBig","Cancelled","CancelledByUser","CantDispose","Card","CardNotAuthenticated","CardStatus","CardStatusOwned","CardUnsupported","CertificateUnavailable","ChannelId","Characteristics","ChvBlocked","CommDataLost","CommError","Communications","Context","CurrentBwt","CurrentClk","CurrentCwt","CurrentD","CurrentEbcEncoding","CurrentF","CurrentIfsc","CurrentIfsd","CurrentIoState","CurrentN","CurrentProtocolType","CurrentW","DefaultClk","DefaultDataRate","DeviceFriendlyName","DeviceInUse","DeviceSystemName","DeviceUnit","DirNotFound","Direct","Disposition","DuplicateReader","EMPTY","EXCLUSIVE","EjectCard","Eof","Error","EscAuthrequest","EscCancel","EscReset","Exclusive","ExtendedBwt","FileNotFound","Global","IGNORE","INUSE","IccCreateorder","IccInstallation","IccInterfaceStatus","IccPresence","IccState","IccTypePerAtr","IfdProtocol","InsufficientBuffer","InternalError","InvalidAtr","InvalidChv","InvalidHandle","InvalidParameter","InvalidTarget","InvalidValue","LeaveCard","MAX_ATR_SIZE","MAX_BUFFER_SIZE","MAX_BUFFER_SIZE_EXTENDED","MUTE","MaxClk","MaxDataRate","MaxIfsd","Maxinput","Mechanical","NEGOTIABLE","NoAccess","NoDir","NoFile","NoKeyContainer","NoMemory","NoReadersAvailable","NoService","NoSmartcard","NoSuchCertificate","NotReady","NotTransacted","PNP_NOTIFICATION","POWERED","PRESENT","PRESENT","PciTooSmall","PowerMgmt","PowerMgmtSupport","ProtoMismatch","Protocol","Protocol","Protocols","RAW","RAW","ReaderNames","ReaderState","ReaderUnavailable","ReaderUnsupported","RemovedCard","ResetCard","ResetCard","SPECIFIC","SWALLOWED","Scope","Security","SecurityViolation","ServerTooBusy","ServiceStopped","ShareMode","Shared","SharingViolation","Shutdown","State","Status","SupressT1IfsRequest","SyncProtocolTypes","System","System","SystemCancelled","T0","T0","T1","T1","Terminal","Timeout","Transaction","UNAVAILABLE","UNAWARE","UNDEFINED","UNKNOWN","UNKNOWN","UNPOWERED","Unexpected","UnknownCard","UnknownError","UnknownReader","UnknownResMng","UnpowerCard","UnpoweredCard","UnresponsiveCard","UnsupportedCard","UnsupportedFeature","User","UserAuthInputDevice","UserToCardAuthDevice","VendorDefined","VendorIfdSerialNo","VendorIfdType","VendorIfdVersion","VendorInfo","VendorName","WaitedTooLong","WriteTooMany","WrongChv","all","all","all","atr","atr","atr","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","complement","connect","contains","contains","contains","control","ctl_code","current_state","deref","description","difference","difference","difference","disconnect","drop","drop","drop","empty","empty","empty","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","establish","event_count","event_state","extend","extend","extend","ffi","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","get_attribute","get_attribute_len","get_attribute_owned","get_status_change","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_valid","list_readers","list_readers_len","list_readers_owned","name","new","next","not","not","not","partial_cmp","partial_cmp","partial_cmp","protocol","protocol","protocol2","protocol2","reader_names","reader_names","reconnect","release","remove","remove","remove","set","set","set","set_attribute","status","status","status","status2","status2_len","status2_owned","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","sync_current_state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","transaction","transaction2","transmit","transmit2","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union"],"q":[[0,"pcsc"],[529,"core::ffi::c_str"],[530,"pcsc_sys"],[531,"core::result"],[532,"core::cmp"],[533,"core::iter::traits::collect"],[534,"core::fmt"],[535,"core::fmt"],[536,"alloc::vec"],[537,"core::time"],[538,"core::convert"],[539,"core::hash"],[540,"alloc::ffi::c_str"],[541,"alloc::string"],[542,"core::any"]],"d":["","","","","","Card reader attribute types.","A class of Attributes.","","","","","","","","","A connection to a smart card.","","Status of a card in a card reader.","Status of a card in a card reader (owned).","","","","","","","","","Library context to the PCSC service.","","","","","","","","","","","","","","","","","","","","","Disposition method when disconnecting from a card reader.","","","","","","Possible library errors.","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum amount of bytes in an ATR.","Maximum amount of bytes in a short APDU command or …","Maximum amount of bytes in an extended APDU command or …","","","","","","","","","","","","","","","","","","","A special reader name for detecting card reader insertions …","","","","","","","","A smart card communication protocol.","","A mask of possible communication protocols.","","","An iterator over card reader names.","A structure for tracking the current state of card readers …","","","","","","","","Scope of a context.","","","","","How a reader connection is shared.","","","","A mask of the state a card reader.","A mask of the status of a card in a card reader.","","","","","","","","","","","","An exclusive transaction with a card.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","The ATR (Answer To Reset) of the card inserted to the …","The current ATR string of the card.","The current ATR string of the card.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cancel any ongoing blocking operation in the Context.","Clone the <code>Context</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Connect to a card which is present in a reader.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Sends a command directly to the reader (driver).","Transform a control code in the form expected by the …","The last current state that was set.","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Disconnect from the card.","","","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","End the transaction.","","","","","","","","","","","Establish a new context.","The card event count.","The last reported state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get an attribute of the card or card reader.","Get the needed length of a buffer to be passed to …","Get an attribute of the card or card reader, allocating a …","Wait for card and card reader state changes.","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Check whether the Context is still valid.","List all connected card readers.","Get the needed length of a buffer to be passed to …","List all connected card readers, allocating buffers of the …","The name of the card reader.","Create a ReaderState for a card reader with a given …","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Current protocol of the card, if any.","Current protocol of the card, if any.","Current protocol of the card, if any.","Current protocol of the card, if any.","Iterator over the names by which the connected card reader …","Slice of the names by which the connected card reader is …","Reconnect to the card.","Release the context.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Set an attribute of the card or card reader.","Get current info on the card.","Current status of the smart card in the reader.","Current status of the smart card in the reader.","Get current info on the card.","Get the needed length of the names buffer (first result) …","Get current info on the card, allocating buffers of the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Sync the currently-known state to the last reported state.","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Start a new exclusive transaction with the card.","Start a new exclusive transaction with the card.","Transmit an APDU command to the card.","Transmit an APDU command to the card.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[3,4,2,20,20,0,0,13,2,13,13,13,13,13,13,0,13,0,0,13,13,20,20,13,13,13,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,13,15,0,13,2,2,17,13,0,20,20,20,15,20,13,18,2,2,13,13,20,20,19,20,19,13,13,13,13,13,13,13,13,17,0,0,0,2,20,20,20,20,19,3,13,13,13,13,13,13,13,13,13,13,13,0,3,2,3,13,19,20,13,0,19,0,16,4,0,0,13,13,13,17,13,3,3,0,19,13,13,13,0,15,13,13,0,0,20,20,18,19,13,16,4,16,4,18,13,0,2,2,4,2,3,2,13,13,13,13,13,17,13,13,13,13,18,20,20,19,20,20,20,19,20,13,13,13,2,3,4,5,8,9,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,12,12,2,3,15,16,4,17,13,18,19,20,21,8,9,12,2,3,15,16,4,17,13,18,19,20,21,8,9,2,3,4,2,3,4,12,2,3,4,23,0,5,25,13,2,3,4,23,5,23,25,2,3,4,25,2,3,15,16,4,17,13,18,19,20,12,5,5,2,3,4,0,2,2,2,2,2,3,3,3,3,3,15,16,4,4,4,4,4,17,13,13,18,19,20,21,8,9,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,2,3,4,2,3,4,2,3,4,2,3,4,23,23,23,12,2,3,15,16,4,17,13,18,19,20,2,3,4,2,3,4,2,3,4,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,21,2,3,4,2,3,4,12,12,12,12,5,5,21,2,3,4,2,3,4,8,9,8,9,8,9,23,12,2,3,4,2,3,4,23,23,8,9,23,23,23,2,3,4,2,3,4,2,3,4,5,12,2,3,15,16,4,17,13,18,19,20,21,8,9,13,2,3,4,23,23,23,23,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,5,12,23,25,2,3,15,16,4,17,13,18,19,20,21,8,9,2,3,4],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````{{}b}````````````````````````````````````````````````````````````````````````{{}d}{{}f}{{}h}{j{{n{l}}}}{A`{{n{l}}}}{Ab{{n{l}}}}{{dd}d}{{ff}f}{{hh}h}{{dd}Ad}{{ff}Ad}{{hh}Ad}543210{dAf}{fAf}{hAf}876543{ce{}{}}000000000000000000000000000000000{Ah{{Al{AdAj}}}}{AhAh}{dd}{ff}{AnAn}{B`B`}{hh}{BbBb}{AjAj}{BdBd}{BfBf}{BhBh}{BjBj}{A`A`}{AbAb}{{ce}Ad{}{}}0000000000000{{dd}Bl}{{ff}Bl}{{hh}Bl}{dd}{ff}>{{AhbAnh}{{Al{BnAj}}}}{{dd}C`}{{ff}C`}{{hh}C`}{{BnAf{n{l}}{n{l}}}{{Al{{n{l}}Aj}}}}{AfAf}{jd}{CbBn}{AjCd}{{dd}d}{{ff}f}{{hh}h}{{BnBb}{{Al{Ad{Cf{BnAj}}}}}}{jAd}{BnAd}{CbAd}{{}d}{{}f}{{}h}{{CbBb}{{Al{Ad{Cf{CbAj}}}}}}{{dd}C`}{{ff}C`}{{AnAn}C`}{{B`B`}C`}{{hh}C`}{{BbBb}C`}{{AjAj}C`}{{BdBd}C`}{{BfBf}C`}{{BhBh}C`}{Bd{{Al{AhAj}}}}{jCh}{jd}{{dc}Ad{{Cl{}{{Cj{d}}}}}}{{fc}Ad{{Cl{}{{Cj{f}}}}}}{{hc}Ad{{Cl{}{{Cj{h}}}}}}`{{dCn}D`}0000{{fCn}D`}0000{{AnCn}D`}{{B`Cn}D`}{{hCn}D`}0000{{BbCn}D`}{{AjCn}D`}{{AjCn}{{Al{AdDb}}}}{{BdCn}D`}{{BfCn}D`}{{BhCn}D`}{{BjCn}D`}{{A`Cn}D`}{{AbCn}D`}{cc{}}0000000000000000{Af{{Dd{d}}}}{Af{{Dd{f}}}}{Af{{Dd{h}}}}{Afd}{Aff}{Afh}210{cd{{Cl{}{{Cj{d}}}}}}{cf{{Cl{}{{Cj{f}}}}}}{ch{{Cl{}{{Cj{h}}}}}}{{BnBh{n{l}}}{{Al{{n{l}}Aj}}}}{{BnBh}{{Al{DfAj}}}}{{BnBh}{{Al{{Dh{l}}Aj}}}}{{Ahc{n{j}}}{{Al{AdAj}}}{{Dl{{Dd{Dj}}}}}}{{dc}AdDn}{{fc}AdDn}{{Anc}AdDn}{{B`c}AdDn}{{hc}AdDn}{{Bbc}AdDn}{{Ajc}AdDn}{{Bdc}AdDn}{{Bfc}AdDn}{{Bhc}AdDn}{{dd}Ad}{{ff}Ad}{{hh}Ad}{{dd}d}{{ff}f}{{hh}h}{{dd}C`}{{ff}C`}{{hh}C`}{ce{}{}}00000000000000000{dC`}{fC`}{hC`}210{Ah{{Al{AdAj}}}}{{Ah{n{l}}}{{Al{BjAj}}}}{Ah{{Al{DfAj}}}}{Ah{{Al{{Dh{E`}}Aj}}}}{jb}{{cd}j{{Dl{E`}}}}{Bj{{Dd{b}}}}{dd}{ff}{hh}{{dd}{{Dd{Bl}}}}{{ff}{{Dd{Bl}}}}{{hh}{{Dd{Bl}}}}{A`B`}{AbB`}{A`{{Dd{B`}}}}{Ab{{Dd{B`}}}}{A`Bj}{Ab{{n{E`}}}}{{BnAnhBb}{{Al{AdAj}}}}{Ah{{Al{Ad{Cf{AhAj}}}}}}{{dd}Ad}{{ff}Ad}{{hh}Ad}{{ddC`}Ad}{{ffC`}Ad}{{hhC`}Ad}{{BnBh{n{l}}}{{Al{AdAj}}}}{Bn{{Al{{Cf{fB`}}Aj}}}}{A`f}{Abf}{{Bn{n{l}}{n{l}}}{{Al{A`Aj}}}}{Bn{{Al{{Cf{DfDf}}Aj}}}}{Bn{{Al{AbAj}}}}{{dd}d}{{ff}f}{{hh}h}?>=210{jAd}{ce{}{}}0000000000000{cEb{}}{{dd}Ad}{{ff}Ad}{{hh}Ad}{Bn{{Al{CbAj}}}}{Bn{{Al{Cb{Cf{BnAj}}}}}}{{Bn{n{l}}{n{l}}}{{Al{{n{l}}Aj}}}}{{Bn{n{l}}{n{l}}}{{Al{{n{l}}{Cf{AjDf}}}}}}{c{{Al{e}}}{}{}}000000000000000000000000000000000{cEd{}}0000000000000000>=<","c":[437],"p":[[5,"CStr",529],[5,"State",0],[5,"Status",0],[5,"Protocols",0],[5,"ReaderState",0],[1,"u8"],[1,"slice"],[5,"CardStatus",0],[5,"CardStatusOwned",0],[1,"unit"],[8,"DWORD",530],[5,"Context",0],[6,"Error",0],[6,"Result",531],[6,"ShareMode",0],[6,"Protocol",0],[6,"Disposition",0],[6,"Scope",0],[6,"AttributeClass",0],[6,"Attribute",0],[5,"ReaderNames",0],[6,"Ordering",532],[5,"Card",0],[1,"bool"],[5,"Transaction",0],[1,"str"],[1,"tuple"],[1,"u32"],[17,"Item"],[10,"IntoIterator",533],[5,"Formatter",534],[8,"Result",534],[5,"Error",534],[6,"Option",535],[1,"usize"],[5,"Vec",536],[5,"Duration",537],[10,"Into",538],[10,"Hasher",539],[5,"CString",540],[5,"String",541],[5,"TypeId",542]],"b":[[307,"impl-LowerHex-for-State"],[308,"impl-UpperHex-for-State"],[309,"impl-Debug-for-State"],[310,"impl-Binary-for-State"],[311,"impl-Octal-for-State"],[312,"impl-Binary-for-Status"],[313,"impl-UpperHex-for-Status"],[314,"impl-Octal-for-Status"],[315,"impl-Debug-for-Status"],[316,"impl-LowerHex-for-Status"],[319,"impl-UpperHex-for-Protocols"],[320,"impl-Debug-for-Protocols"],[321,"impl-Binary-for-Protocols"],[322,"impl-LowerHex-for-Protocols"],[323,"impl-Octal-for-Protocols"],[325,"impl-Debug-for-Error"],[326,"impl-Display-for-Error"]]}],\
["pcsc_sys",{"doc":"Low level bindings to the PCSC C API.","t":"SISISSSIISSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSHSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFSSSSSSSSSSSSFSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSHHHHHHHHHHHHHHHHINNNNOOOOONNJJJNNOOONNNNNN","n":["ATR_BUFFER_SIZE","DWORD","INFINITE","LONG","MAX_ATR_SIZE","MAX_BUFFER_SIZE","MAX_BUFFER_SIZE_EXTENDED","SCARDCONTEXT","SCARDHANDLE","SCARD_ABSENT","SCARD_ATR_LENGTH","SCARD_ATTR_ASYNC_PROTOCOL_TYPES","SCARD_ATTR_ATR_STRING","SCARD_ATTR_CHANNEL_ID","SCARD_ATTR_CHARACTERISTICS","SCARD_ATTR_CURRENT_BWT","SCARD_ATTR_CURRENT_CLK","SCARD_ATTR_CURRENT_CWT","SCARD_ATTR_CURRENT_D","SCARD_ATTR_CURRENT_EBC_ENCODING","SCARD_ATTR_CURRENT_F","SCARD_ATTR_CURRENT_IFSC","SCARD_ATTR_CURRENT_IFSD","SCARD_ATTR_CURRENT_IO_STATE","SCARD_ATTR_CURRENT_N","SCARD_ATTR_CURRENT_PROTOCOL_TYPE","SCARD_ATTR_CURRENT_W","SCARD_ATTR_DEFAULT_CLK","SCARD_ATTR_DEFAULT_DATA_RATE","SCARD_ATTR_DEVICE_FRIENDLY_NAME","SCARD_ATTR_DEVICE_FRIENDLY_NAME_A","SCARD_ATTR_DEVICE_FRIENDLY_NAME_W","SCARD_ATTR_DEVICE_IN_USE","SCARD_ATTR_DEVICE_SYSTEM_NAME","SCARD_ATTR_DEVICE_SYSTEM_NAME_A","SCARD_ATTR_DEVICE_SYSTEM_NAME_W","SCARD_ATTR_DEVICE_UNIT","SCARD_ATTR_ESC_AUTHREQUEST","SCARD_ATTR_ESC_CANCEL","SCARD_ATTR_ESC_RESET","SCARD_ATTR_EXTENDED_BWT","SCARD_ATTR_ICC_INTERFACE_STATUS","SCARD_ATTR_ICC_PRESENCE","SCARD_ATTR_ICC_TYPE_PER_ATR","SCARD_ATTR_MAXINPUT","SCARD_ATTR_MAX_CLK","SCARD_ATTR_MAX_DATA_RATE","SCARD_ATTR_MAX_IFSD","SCARD_ATTR_POWER_MGMT_SUPPORT","SCARD_ATTR_SUPRESS_T1_IFS_REQUEST","SCARD_ATTR_SYNC_PROTOCOL_TYPES","SCARD_ATTR_USER_AUTH_INPUT_DEVICE","SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE","SCARD_ATTR_VENDOR_IFD_SERIAL_NO","SCARD_ATTR_VENDOR_IFD_TYPE","SCARD_ATTR_VENDOR_IFD_VERSION","SCARD_ATTR_VENDOR_NAME","SCARD_AUTOALLOCATE","SCARD_CLASS_COMMUNICATIONS","SCARD_CLASS_ICC_STATE","SCARD_CLASS_IFD_PROTOCOL","SCARD_CLASS_MECHANICAL","SCARD_CLASS_POWER_MGMT","SCARD_CLASS_PROTOCOL","SCARD_CLASS_SECURITY","SCARD_CLASS_SYSTEM","SCARD_CLASS_VENDOR_DEFINED","SCARD_CLASS_VENDOR_INFO","SCARD_CTL_CODE","SCARD_EJECT_CARD","SCARD_E_BAD_SEEK","SCARD_E_CANCELLED","SCARD_E_CANT_DISPOSE","SCARD_E_CARD_UNSUPPORTED","SCARD_E_CERTIFICATE_UNAVAILABLE","SCARD_E_COMM_DATA_LOST","SCARD_E_DIR_NOT_FOUND","SCARD_E_DUPLICATE_READER","SCARD_E_FILE_NOT_FOUND","SCARD_E_ICC_CREATEORDER","SCARD_E_ICC_INSTALLATION","SCARD_E_INSUFFICIENT_BUFFER","SCARD_E_INVALID_ATR","SCARD_E_INVALID_CHV","SCARD_E_INVALID_HANDLE","SCARD_E_INVALID_PARAMETER","SCARD_E_INVALID_TARGET","SCARD_E_INVALID_VALUE","SCARD_E_NOT_READY","SCARD_E_NOT_TRANSACTED","SCARD_E_NO_ACCESS","SCARD_E_NO_DIR","SCARD_E_NO_FILE","SCARD_E_NO_KEY_CONTAINER","SCARD_E_NO_MEMORY","SCARD_E_NO_READERS_AVAILABLE","SCARD_E_NO_SERVICE","SCARD_E_NO_SMARTCARD","SCARD_E_NO_SUCH_CERTIFICATE","SCARD_E_PCI_TOO_SMALL","SCARD_E_PROTO_MISMATCH","SCARD_E_READER_UNAVAILABLE","SCARD_E_READER_UNSUPPORTED","SCARD_E_SERVER_TOO_BUSY","SCARD_E_SERVICE_STOPPED","SCARD_E_SHARING_VIOLATION","SCARD_E_SYSTEM_CANCELLED","SCARD_E_TIMEOUT","SCARD_E_UNEXPECTED","SCARD_E_UNKNOWN_CARD","SCARD_E_UNKNOWN_READER","SCARD_E_UNKNOWN_RES_MNG","SCARD_E_UNSUPPORTED_FEATURE","SCARD_E_WRITE_TOO_MANY","SCARD_F_COMM_ERROR","SCARD_F_INTERNAL_ERROR","SCARD_F_UNKNOWN_ERROR","SCARD_F_WAITED_TOO_LONG","SCARD_IO_REQUEST","SCARD_LEAVE_CARD","SCARD_NEGOTIABLE","SCARD_POWERED","SCARD_PRESENT","SCARD_PROTOCOL_ANY","SCARD_PROTOCOL_RAW","SCARD_PROTOCOL_T0","SCARD_PROTOCOL_T1","SCARD_PROTOCOL_T15","SCARD_PROTOCOL_UNDEFINED","SCARD_PROTOCOL_UNSET","SCARD_P_SHUTDOWN","SCARD_READERSTATE","SCARD_RESET_CARD","SCARD_SCOPE_GLOBAL","SCARD_SCOPE_SYSTEM","SCARD_SCOPE_TERMINAL","SCARD_SCOPE_USER","SCARD_SHARE_DIRECT","SCARD_SHARE_EXCLUSIVE","SCARD_SHARE_SHARED","SCARD_SPECIFIC","SCARD_STATE_ATRMATCH","SCARD_STATE_CHANGED","SCARD_STATE_EMPTY","SCARD_STATE_EXCLUSIVE","SCARD_STATE_IGNORE","SCARD_STATE_INUSE","SCARD_STATE_MUTE","SCARD_STATE_PRESENT","SCARD_STATE_UNAVAILABLE","SCARD_STATE_UNAWARE","SCARD_STATE_UNKNOWN","SCARD_STATE_UNPOWERED","SCARD_SWALLOWED","SCARD_S_SUCCESS","SCARD_UNKNOWN","SCARD_UNPOWER_CARD","SCARD_W_CACHE_ITEM_NOT_FOUND","SCARD_W_CACHE_ITEM_STALE","SCARD_W_CACHE_ITEM_TOO_BIG","SCARD_W_CANCELLED_BY_USER","SCARD_W_CARD_NOT_AUTHENTICATED","SCARD_W_CHV_BLOCKED","SCARD_W_EOF","SCARD_W_REMOVED_CARD","SCARD_W_RESET_CARD","SCARD_W_SECURITY_VIOLATION","SCARD_W_UNPOWERED_CARD","SCARD_W_UNRESPONSIVE_CARD","SCARD_W_UNSUPPORTED_CARD","SCARD_W_WRONG_CHV","SCardBeginTransaction","SCardCancel","SCardConnect","SCardControl","SCardDisconnect","SCardEndTransaction","SCardEstablishContext","SCardGetAttrib","SCardGetStatusChange","SCardIsValidContext","SCardListReaders","SCardReconnect","SCardReleaseContext","SCardSetAttrib","SCardStatus","SCardTransmit","ULONG","borrow","borrow","borrow_mut","borrow_mut","cbAtr","cbPciLength","dwCurrentState","dwEventState","dwProtocol","from","from","g_rgSCardRawPci","g_rgSCardT0Pci","g_rgSCardT1Pci","into","into","pvUserData","rgbAtr","szReader","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"pcsc_sys"],[213,"core::result"],[214,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,4,5,5,4,5,5,4,4,5,0,0,0,4,5,5,5,5,4,5,4,5,4,5],"f":"````````````````````````````````````````````````````````````````````{bb}```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{ce{}{}}000`````{cc{}}0```11```{c{{d{e}}}{}{}}000{cf{}}0","c":[],"p":[[8,"DWORD",0],[6,"Result",213],[5,"TypeId",214],[5,"SCARD_IO_REQUEST",0],[5,"SCARD_READERSTATE",0]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
